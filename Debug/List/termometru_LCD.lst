
AVRASM ver. 2.1.30  C:\Users\Bogdan\Desktop\termometru_LCD\Debug\List\termometru_LCD.asm Fri May 28 11:02:20 2021

C:\Users\Bogdan\Desktop\termometru_LCD\Debug\List\termometru_LCD.asm(1085): warning: Register r4 already defined by the .DEF directive
C:\Users\Bogdan\Desktop\termometru_LCD\Debug\List\termometru_LCD.asm(1086): warning: Register r3 already defined by the .DEF directive
C:\Users\Bogdan\Desktop\termometru_LCD\Debug\List\termometru_LCD.asm(1087): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.43 Evaluation
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R3
                 	.DEF __lcd_maxx=R6
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0066 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00003e 2710
00003f 03e8
000040 0064
000041 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000042 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000043 1000
000044 0100
000045 0010
000046 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000047 6425
000048 6325
000049 0043
00004a 6425      	.DB  0x25,0x64,0x25,0x63,0x43,0x0,0x25,0x64
00004b 6325
00004c 2046
00004d 2500
00004e 2564      	.DB  0x25,0x63,0x46,0x20,0x0,0x25,0x64,0x25
00004f 4b63
000050 0020
000051 6554
000052 706d      	.DB  0x63,0x4B,0x20,0x0,0x54,0x65,0x6D,0x70
000053 7265
000054 7461
000055 7275
000056 3a61      	.DB  0x65,0x72,0x61,0x74,0x75,0x72,0x61,0x3A
C:\Users\Bogdan\Desktop\termometru_LCD\Debug\List\termometru_LCD.asm(1142): warning: .cseg .db misalignment - padding zero byte
000057 0000      	.DB  0x0
                 _0x2020003:
000058 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000059 000d      	.DW  0x0D
00005a 0200      	.DW  _0xE
00005b 00a2      	.DW  _0x0*2+20
                 
00005c 000d      	.DW  0x0D
00005d 020d      	.DW  _0xE+13
00005e 00a2      	.DW  _0x0*2+20
                 
00005f 000d      	.DW  0x0D
000060 021a      	.DW  _0xE+26
000061 00a2      	.DW  _0x0*2+20
                 
000062 0002      	.DW  0x02
000063 0251      	.DW  __base_y_G101
000064 00b0      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000065 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000066 94f8      	CLI
000067 27ee      	CLR  R30
000068 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000069 e0f1      	LDI  R31,1
00006a bff5      	OUT  MCUCR,R31
00006b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00006c e08d      	LDI  R24,(14-2)+1
00006d e0a2      	LDI  R26,2
00006e 27bb      	CLR  R27
                 __CLEAR_REG:
00006f 93ed      	ST   X+,R30
000070 958a      	DEC  R24
000071 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000072 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000073 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000074 e0a0      	LDI  R26,LOW(__SRAM_START)
000075 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000076 93ed      	ST   X+,R30
000077 9701      	SBIW R24,1
000078 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000079 ebe2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007b 9185      	LPM  R24,Z+
00007c 9195      	LPM  R25,Z+
00007d 9700      	SBIW R24,0
00007e f061      	BREQ __GLOBAL_INI_END
00007f 91a5      	LPM  R26,Z+
000080 91b5      	LPM  R27,Z+
000081 9005      	LPM  R0,Z+
000082 9015      	LPM  R1,Z+
000083 01bf      	MOVW R22,R30
000084 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000085 9005      	LPM  R0,Z+
000086 920d      	ST   X+,R0
000087 9701      	SBIW R24,1
000088 f7e1      	BRNE __GLOBAL_INI_LOOP
000089 01fb      	MOVW R30,R22
00008a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00008b e0e0      	LDI  R30,__GPIOR0_INIT
00008c bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008d efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008e bfed      	OUT  SPL,R30
00008f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000090 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000091 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000092 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000093 940c 00b0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 002E {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 002F ADMUX=adc_input | ADC_VREF_TYPE;
000095 931a      	ST   -Y,R17
000096 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
000097 2fe1      	MOV  R30,R17
000098 66e0      	ORI  R30,LOW(0x60)
000099 93e0 007c 	STS  124,R30
                 ; 0000 0030 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0031 delay_us(10);
                +
00009b e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
00009c 958a     +DEC R24
00009d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
                 ; 0000 0032 // Start the AD conversion
                 ; 0000 0033 ADCSRA|=(1<<ADSC);
00009e 91e0 007a 	LDS  R30,122
0000a0 64e0      	ORI  R30,0x40
0000a1 93e0 007a 	STS  122,R30
                 ; 0000 0034 // Wait for the AD conversion to complete
                 ; 0000 0035 while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
0000a3 91e0 007a 	LDS  R30,122
0000a5 71e0      	ANDI R30,LOW(0x10)
0000a6 f3e1      	BREQ _0x3
                 ; 0000 0036 ADCSRA|=(1<<ADIF);
0000a7 91e0 007a 	LDS  R30,122
0000a9 61e0      	ORI  R30,0x10
0000aa 93e0 007a 	STS  122,R30
                 ; 0000 0037 return ADCH;
0000ac 91e0 0079 	LDS  R30,121
0000ae 940c 03ac 	JMP  _0x2080001
                 ; 0000 0038 }
                 ; .FEND
                 ;void main(void)
                 ; 0000 003B {
                 _main:
                 ; .FSTART _main
                 ; 0000 003C // Declare your local variables here
                 ; 0000 003D 
                 ; 0000 003E // Crystal Oscillator division factor: 1
                 ; 0000 003F #pragma optsize-
                 ; 0000 0040 CLKPR=(1<<CLKPCE);
0000b0 e8e0      	LDI  R30,LOW(128)
0000b1 93e0 0061 	STS  97,R30
                 ; 0000 0041 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 93e0 0061 	STS  97,R30
                 ; 0000 0042 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0043 #pragma optsize+
                 ; 0000 0044 #endif
                 ; 0000 0045 
                 ; 0000 0046 // Input/Output Ports initialization
                 ; 0000 0047 // Port A initialization
                 ; 0000 0048 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0049 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000b6 b9e1      	OUT  0x1,R30
                 ; 0000 004A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000b7 b9e2      	OUT  0x2,R30
                 ; 0000 004C 
                 ; 0000 004D // Port B initialization
                 ; 0000 004E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000b8 b9e4      	OUT  0x4,R30
                 ; 0000 0050 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0051 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000b9 b9e5      	OUT  0x5,R30
                 ; 0000 0052 
                 ; 0000 0053 // Port C initialization
                 ; 0000 0054 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0055 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000ba b9e7      	OUT  0x7,R30
                 ; 0000 0056 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0057 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000bb b9e8      	OUT  0x8,R30
                 ; 0000 0058 
                 ; 0000 0059 // Port D initialization
                 ; 0000 005A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005B DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000bc e0e3      	LDI  R30,LOW(3)
0000bd b9ea      	OUT  0xA,R30
                 ; 0000 005C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000be e0e0      	LDI  R30,LOW(0)
0000bf b9eb      	OUT  0xB,R30
                 ; 0000 005E 
                 ; 0000 005F // Timer/Counter 0 initialization
                 ; 0000 0060 // Clock source: System Clock
                 ; 0000 0061 // Clock value: Timer 0 Stopped
                 ; 0000 0062 // Mode: Normal top=0xFF
                 ; 0000 0063 // OC0A output: Disconnected
                 ; 0000 0064 // OC0B output: Disconnected
                 ; 0000 0065 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000c0 bde4      	OUT  0x24,R30
                 ; 0000 0066 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000c1 bde5      	OUT  0x25,R30
                 ; 0000 0067 TCNT0=0x00;
0000c2 bde6      	OUT  0x26,R30
                 ; 0000 0068 OCR0A=0x00;
0000c3 bde7      	OUT  0x27,R30
                 ; 0000 0069 OCR0B=0x00;
0000c4 bde8      	OUT  0x28,R30
                 ; 0000 006A 
                 ; 0000 006B // Timer/Counter 1 initialization
                 ; 0000 006C // Clock source: System Clock
                 ; 0000 006D // Clock value: Timer1 Stopped
                 ; 0000 006E // Mode: Normal top=0xFFFF
                 ; 0000 006F // OC1A output: Disconnected
                 ; 0000 0070 // OC1B output: Disconnected
                 ; 0000 0071 // Noise Canceler: Off
                 ; 0000 0072 // Input Capture on Falling Edge
                 ; 0000 0073 // Timer1 Overflow Interrupt: Off
                 ; 0000 0074 // Input Capture Interrupt: Off
                 ; 0000 0075 // Compare A Match Interrupt: Off
                 ; 0000 0076 // Compare B Match Interrupt: Off
                 ; 0000 0077 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000c5 93e0 0080 	STS  128,R30
                 ; 0000 0078 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000c7 93e0 0081 	STS  129,R30
                 ; 0000 0079 TCNT1H=0x00;
0000c9 93e0 0085 	STS  133,R30
                 ; 0000 007A TCNT1L=0x00;
0000cb 93e0 0084 	STS  132,R30
                 ; 0000 007B ICR1H=0x00;
0000cd 93e0 0087 	STS  135,R30
                 ; 0000 007C ICR1L=0x00;
0000cf 93e0 0086 	STS  134,R30
                 ; 0000 007D OCR1AH=0x00;
0000d1 93e0 0089 	STS  137,R30
                 ; 0000 007E OCR1AL=0x00;
0000d3 93e0 0088 	STS  136,R30
                 ; 0000 007F OCR1BH=0x00;
0000d5 93e0 008b 	STS  139,R30
                 ; 0000 0080 OCR1BL=0x00;
0000d7 93e0 008a 	STS  138,R30
                 ; 0000 0081 
                 ; 0000 0082 // Timer/Counter 2 initialization
                 ; 0000 0083 // Clock source: System Clock
                 ; 0000 0084 // Clock value: Timer2 Stopped
                 ; 0000 0085 // Mode: Normal top=0xFF
                 ; 0000 0086 // OC2A output: Disconnected
                 ; 0000 0087 // OC2B output: Disconnected
                 ; 0000 0088 ASSR=(0<<EXCLK) | (0<<AS2);
0000d9 93e0 00b6 	STS  182,R30
                 ; 0000 0089 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
0000db 93e0 00b0 	STS  176,R30
                 ; 0000 008A TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000dd 93e0 00b1 	STS  177,R30
                 ; 0000 008B TCNT2=0x00;
0000df 93e0 00b2 	STS  178,R30
                 ; 0000 008C OCR2A=0x00;
0000e1 93e0 00b3 	STS  179,R30
                 ; 0000 008D OCR2B=0x00;
0000e3 93e0 00b4 	STS  180,R30
                 ; 0000 008E 
                 ; 0000 008F // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0090 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0000e5 93e0 006e 	STS  110,R30
                 ; 0000 0091 
                 ; 0000 0092 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0093 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
0000e7 93e0 006f 	STS  111,R30
                 ; 0000 0094 
                 ; 0000 0095 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 0096 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
0000e9 93e0 0070 	STS  112,R30
                 ; 0000 0097 
                 ; 0000 0098 // External Interrupt(s) initialization
                 ; 0000 0099 // INT0: Off
                 ; 0000 009A // INT1: Off
                 ; 0000 009B // INT2: Off
                 ; 0000 009C // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 009D // Interrupt on any change on pins PCINT8-15: Off
                 ; 0000 009E // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 009F // Interrupt on any change on pins PCINT24-31: Off
                 ; 0000 00A0 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000eb 93e0 0069 	STS  105,R30
                 ; 0000 00A1 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
0000ed bbed      	OUT  0x1D,R30
                 ; 0000 00A2 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
0000ee 93e0 0068 	STS  104,R30
                 ; 0000 00A3 
                 ; 0000 00A4 // USART0 initialization
                 ; 0000 00A5 // USART0 disabled
                 ; 0000 00A6 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0000f0 93e0 00c1 	STS  193,R30
                 ; 0000 00A7 
                 ; 0000 00A8 // USART1 initialization
                 ; 0000 00A9 // USART1 disabled
                 ; 0000 00AA UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
0000f2 93e0 00c9 	STS  201,R30
                 ; 0000 00AB 
                 ; 0000 00AC // Analog Comparator initialization
                 ; 0000 00AD // Analog Comparator: Off
                 ; 0000 00AE // The Analog Comparator's positive input is
                 ; 0000 00AF // connected to the AIN0 pin
                 ; 0000 00B0 // The Analog Comparator's negative input is
                 ; 0000 00B1 // connected to the AIN1 pin
                 ; 0000 00B2 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000f4 e8e0      	LDI  R30,LOW(128)
0000f5 bfe0      	OUT  0x30,R30
                 ; 0000 00B3 // Digital input buffer on AIN0: On
                 ; 0000 00B4 // Digital input buffer on AIN1: On
                 ; 0000 00B5 DIDR1=(0<<AIN0D) | (0<<AIN1D);
0000f6 e0e0      	LDI  R30,LOW(0)
0000f7 93e0 007f 	STS  127,R30
                 ; 0000 00B6 
                 ; 0000 00B7 // ADC initialization
                 ; 0000 00B8 // ADC Clock frequency: 625.000 kHz
                 ; 0000 00B9 // ADC Voltage Reference: AVCC pin
                 ; 0000 00BA // ADC Auto Trigger Source: Free Running
                 ; 0000 00BB // Only the 8 most significant bits of
                 ; 0000 00BC // the AD conversion result are used
                 ; 0000 00BD // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 00BE // ADC4: On, ADC5: On, ADC6: On, ADC7: On
                 ; 0000 00BF DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
0000f9 93e0 007e 	STS  126,R30
                 ; 0000 00C0 ADMUX=ADC_VREF_TYPE;
0000fb e6e0      	LDI  R30,LOW(96)
0000fc 93e0 007c 	STS  124,R30
                 ; 0000 00C1 ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
0000fe eae5      	LDI  R30,LOW(165)
0000ff 93e0 007a 	STS  122,R30
                 ; 0000 00C2 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000101 e0e0      	LDI  R30,LOW(0)
000102 93e0 007b 	STS  123,R30
                 ; 0000 00C3 
                 ; 0000 00C4 // SPI initialization
                 ; 0000 00C5 // SPI disabled
                 ; 0000 00C6 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000104 bdec      	OUT  0x2C,R30
                 ; 0000 00C7 
                 ; 0000 00C8 // TWI initialization
                 ; 0000 00C9 // TWI disabled
                 ; 0000 00CA TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000105 93e0 00bc 	STS  188,R30
                 ; 0000 00CB 
                 ; 0000 00CC // Alphanumeric LCD initialization
                 ; 0000 00CD // Connections are specified in the
                 ; 0000 00CE // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00CF // RS: PORTB Bit 0
                 ; 0000 00D0 // RD: PORTB Bit 1
                 ; 0000 00D1 // EN: PORTB Bit 2
                 ; 0000 00D2 // D4: PORTB Bit 3
                 ; 0000 00D3 // D5: PORTB Bit 4
                 ; 0000 00D4 // D6: PORTB Bit 5
                 ; 0000 00D5 // D7: PORTB Bit 6
                 ; 0000 00D6 // Characters/line: 16
                 ; 0000 00D7 lcd_init(16);
000107 e1a0      	LDI  R26,LOW(16)
000108 d279      	RCALL _lcd_init
                 ; 0000 00D8 
                 ; 0000 00D9 while (1)
                 _0x6:
                 ; 0000 00DA {
                 ; 0000 00DB celsius = (read_adc(0)*5.00);
000109 e0a0      	LDI  R26,LOW(0)
00010a df8a      	RCALL _read_adc
00010b e0f0      	LDI  R31,0
00010c d34d      	RCALL __CWD1
00010d d3c4      	RCALL __CDF1
                +
00010e e0a0     +LDI R26 , LOW ( 0x40A00000 )
00010f e0b0     +LDI R27 , HIGH ( 0x40A00000 )
000110 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
000111 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
000112 d441      	RCALL __MULF12
000113 d2b3      	RCALL SUBOPT_0x0
                 ; 0000 00DC celsius = (celsius/10.24);
000114 d2bb      	RCALL SUBOPT_0x1
                +
000115 e0ea     +LDI R30 , LOW ( 0x4123D70A )
000116 edf7     +LDI R31 , HIGH ( 0x4123D70A )
000117 e263     +LDI R22 , BYTE3 ( 0x4123D70A )
000118 e471     +LDI R23 , BYTE4 ( 0x4123D70A )
                 	__GETD1N 0x4123D70A
000119 d488      	RCALL __DIVF21
00011a d2ac      	RCALL SUBOPT_0x0
                 ; 0000 00DD sprintf(TemperatureC,"%d%cC", (int)celsius, degree_sysmbol);
00011b e2e7      	LDI  R30,LOW(_TemperatureC)
00011c e0f2      	LDI  R31,HIGH(_TemperatureC)
00011d 93fa      	ST   -Y,R31
00011e 93ea      	ST   -Y,R30
                +
00011f e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000120 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000121 93fa      	ST   -Y,R31
000122 93ea      	ST   -Y,R30
000123 d2b5      	RCALL SUBOPT_0x2
000124 d2bd      	RCALL SUBOPT_0x3
                 ; 0000 00DE fahren = celsius *9 / 5;
000125 d2aa      	RCALL SUBOPT_0x1
                +
000126 e0e0     +LDI R30 , LOW ( 0x41100000 )
000127 e0f0     +LDI R31 , HIGH ( 0x41100000 )
000128 e160     +LDI R22 , BYTE3 ( 0x41100000 )
000129 e471     +LDI R23 , BYTE4 ( 0x41100000 )
                 	__GETD1N 0x41100000
00012a d429      	RCALL __MULF12
00012b 01df      	MOVW R26,R30
00012c 01cb      	MOVW R24,R22
                +
00012d e0e0     +LDI R30 , LOW ( 0x40A00000 )
00012e e0f0     +LDI R31 , HIGH ( 0x40A00000 )
00012f ea60     +LDI R22 , BYTE3 ( 0x40A00000 )
000130 e470     +LDI R23 , BYTE4 ( 0x40A00000 )
                 	__GETD1N 0x40A00000
000131 d470      	RCALL __DIVF21
000132 d2bb      	RCALL SUBOPT_0x4
                 ; 0000 00DF fahren = fahren + 32;
000133 d2c3      	RCALL SUBOPT_0x5
                +
000134 e0a0     +LDI R26 , LOW ( 0x42000000 )
000135 e0b0     +LDI R27 , HIGH ( 0x42000000 )
000136 e080     +LDI R24 , BYTE3 ( 0x42000000 )
000137 e492     +LDI R25 , BYTE4 ( 0x42000000 )
                 	__GETD2N 0x42000000
000138 d3cc      	RCALL __ADDF12
000139 d2b4      	RCALL SUBOPT_0x4
                 ; 0000 00E0 sprintf(TemperatureF,"%d%cF ", (int)fahren, degree_sysmbol);
00013a e3e1      	LDI  R30,LOW(_TemperatureF)
00013b e0f2      	LDI  R31,HIGH(_TemperatureF)
00013c 93fa      	ST   -Y,R31
00013d 93ea      	ST   -Y,R30
                +
00013e e9e4     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
00013f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
000140 93fa      	ST   -Y,R31
000141 93ea      	ST   -Y,R30
000142 d2b4      	RCALL SUBOPT_0x5
000143 d29e      	RCALL SUBOPT_0x3
                 ; 0000 00E1 kelvin = celsius + 273.15;
000144 d294      	RCALL SUBOPT_0x2
                +
000145 e3a3     +LDI R26 , LOW ( 0x43889333 )
000146 e9b3     +LDI R27 , HIGH ( 0x43889333 )
000147 e888     +LDI R24 , BYTE3 ( 0x43889333 )
000148 e493     +LDI R25 , BYTE4 ( 0x43889333 )
                 	__GETD2N 0x43889333
000149 d3bb      	RCALL __ADDF12
00014a 93e0 024d 	STS  _kelvin,R30
00014c 93f0 024e 	STS  _kelvin+1,R31
00014e 9360 024f 	STS  _kelvin+2,R22
000150 9370 0250 	STS  _kelvin+3,R23
                 ; 0000 00E2 sprintf(TemperatureK,"%d%cK ", (int)kelvin, degree_sysmbol);
000152 e3eb      	LDI  R30,LOW(_TemperatureK)
000153 e0f2      	LDI  R31,HIGH(_TemperatureK)
000154 93fa      	ST   -Y,R31
000155 93ea      	ST   -Y,R30
                +
000156 e9eb     +LDI R30 , LOW ( 2 * _0x0 + ( 13 ) )
000157 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 13 ) )
                 	__POINTW1FN _0x0,13
000158 93fa      	ST   -Y,R31
000159 93ea      	ST   -Y,R30
00015a 91e0 024d 	LDS  R30,_kelvin
00015c 91f0 024e 	LDS  R31,_kelvin+1
00015e 9160 024f 	LDS  R22,_kelvin+2
000160 9170 0250 	LDS  R23,_kelvin+3
000162 d27f      	RCALL SUBOPT_0x3
                 ; 0000 00E3 
                 ; 0000 00E4 if((int)celsius>90){
000163 d275      	RCALL SUBOPT_0x2
000164 d336      	RCALL __CFD1
000165 35eb      	CPI  R30,LOW(0x5B)
000166 e0a0      	LDI  R26,HIGH(0x5B)
000167 07fa      	CPC  R31,R26
000168 f014      	BRLT _0x9
                 ; 0000 00E5 PORTD = PORTD | ( 1<<0) ; //PIN0 of port D is high
000169 9a58      	SBI  0xB,0
                 ; 0000 00E6 }
                 ; 0000 00E7 
                 ; 0000 00E8 else{
00016a c001      	RJMP _0xA
                 _0x9:
                 ; 0000 00E9 PORTD = PORTD &  ~( 1<<0) ; //PIN0 of port D will remain low
00016b 9858      	CBI  0xB,0
                 ; 0000 00EA }
                 _0xA:
                 ; 0000 00EB 
                 ; 0000 00EC if((int)celsius<10){
00016c d26c      	RCALL SUBOPT_0x2
00016d d32d      	RCALL __CFD1
00016e 973a      	SBIW R30,10
00016f f414      	BRGE _0xB
                 ; 0000 00ED PORTD = PORTD | ( 1<<1) ; //PIN1 of port D is high
000170 9a59      	SBI  0xB,1
                 ; 0000 00EE }
                 ; 0000 00EF 
                 ; 0000 00F0 else{
000171 c001      	RJMP _0xC
                 _0xB:
                 ; 0000 00F1 PORTD = PORTD &  ~( 1<<1) ; //PIN1 of port D will remain low
000172 9859      	CBI  0xB,1
                 ; 0000 00F2 }
                 _0xC:
                 ; 0000 00F3 
                 ; 0000 00F4 
                 ; 0000 00F5 if(PINC & (1<<5) ) //if PIN5 of port C is high
000173 9b35      	SBIS 0x6,5
000174 c007      	RJMP _0xD
                 ; 0000 00F6 {
                 ; 0000 00F7 lcd_clear();
000175 d28a      	RCALL SUBOPT_0x6
                 ; 0000 00F8 lcd_gotoxy(0,0);
                 ; 0000 00F9 lcd_puts("Temperatura:");
                +
000176 e0a0     +LDI R26 , LOW ( _0xE + ( 0 ) )
000177 e0b2     +LDI R27 , HIGH ( _0xE + ( 0 ) )
                 	__POINTW2MN _0xE,0
000178 d28c      	RCALL SUBOPT_0x7
                 ; 0000 00FA lcd_gotoxy(0,1);
                 ; 0000 00FB lcd_puts(TemperatureK);
000179 e3ab      	LDI  R26,LOW(_TemperatureK)
00017a e0b2      	LDI  R27,HIGH(_TemperatureK)
00017b c00f      	RJMP _0x13
                 ; 0000 00FC delay_ms(1000);
                 ; 0000 00FD }
                 ; 0000 00FE else if (PINC & (1<<4) )
                 _0xD:
00017c 9b34      	SBIS 0x6,4
00017d c007      	RJMP _0x10
                 ; 0000 00FF {
                 ; 0000 0100 lcd_clear();
00017e d281      	RCALL SUBOPT_0x6
                 ; 0000 0101 lcd_gotoxy(0,0);
                 ; 0000 0102 lcd_puts("Temperatura:");
                +
00017f e0ad     +LDI R26 , LOW ( _0xE + ( 13 ) )
000180 e0b2     +LDI R27 , HIGH ( _0xE + ( 13 ) )
                 	__POINTW2MN _0xE,13
000181 d283      	RCALL SUBOPT_0x7
                 ; 0000 0103 lcd_gotoxy(0,1);
                 ; 0000 0104 lcd_puts(TemperatureF);
000182 e3a1      	LDI  R26,LOW(_TemperatureF)
000183 e0b2      	LDI  R27,HIGH(_TemperatureF)
000184 c006      	RJMP _0x13
                 ; 0000 0105 delay_ms(1000);
                 ; 0000 0106 }
                 ; 0000 0107 else
                 _0x10:
                 ; 0000 0108 {
                 ; 0000 0109 lcd_clear();
000185 d27a      	RCALL SUBOPT_0x6
                 ; 0000 010A lcd_gotoxy(0,0);
                 ; 0000 010B lcd_puts("Temperatura:");
                +
000186 e1aa     +LDI R26 , LOW ( _0xE + ( 26 ) )
000187 e0b2     +LDI R27 , HIGH ( _0xE + ( 26 ) )
                 	__POINTW2MN _0xE,26
000188 d27c      	RCALL SUBOPT_0x7
                 ; 0000 010C lcd_gotoxy(0,1);
                 ; 0000 010D lcd_puts(TemperatureC);
000189 e2a7      	LDI  R26,LOW(_TemperatureC)
00018a e0b2      	LDI  R27,HIGH(_TemperatureC)
                 _0x13:
00018b d1e7      	RCALL _lcd_puts
                 ; 0000 010E delay_ms(1000);
00018c eea8      	LDI  R26,LOW(1000)
00018d e0b3      	LDI  R27,HIGH(1000)
00018e d457      	RCALL _delay_ms
                 ; 0000 010F }
                 ; 0000 0110 
                 ; 0000 0111 }
00018f cf79      	RJMP _0x6
                 ; 0000 0112 
                 ; 0000 0113 
                 ; 0000 0114 }
                 _0x12:
000190 cfff      	RJMP _0x12
                 ; .FEND
                 
                 	.DSEG
                 _0xE:
000200           	.BYTE 0x27
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000191 d2a6      	RCALL __SAVELOCR6
000192 019d      	MOVW R18,R26
000193 815e      	LDD  R21,Y+6
000194 9612      	ADIW R26,2
000195 d2c9      	RCALL __GETW1P
000196 9730      	SBIW R30,0
000197 f0e1      	BREQ _0x2000016
000198 01d9      	MOVW R26,R18
000199 9614      	ADIW R26,4
00019a d2c4      	RCALL __GETW1P
00019b 018f      	MOVW R16,R30
00019c 9730      	SBIW R30,0
00019d f059      	BREQ _0x2000018
                +
00019e 3002     +CPI R16 , LOW ( 2 )
00019f e0e0     +LDI R30 , HIGH ( 2 )
0001a0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001a1 f060      	BRLO _0x2000019
0001a2 01f8      	MOVW R30,R16
0001a3 9731      	SBIW R30,1
0001a4 018f      	MOVW R16,R30
                +
0001a5 01d9     +MOVW R26 , R18
0001a6 9614     +ADIW R26 , 4
0001a7 93ed     +ST X + , R30
0001a8 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2000018:
0001a9 01d9      	MOVW R26,R18
0001aa 9612      	ADIW R26,2
0001ab d25e      	RCALL SUBOPT_0x8
0001ac 9731      	SBIW R30,1
0001ad 8350      	ST   Z,R21
                 _0x2000019:
0001ae 01d9      	MOVW R26,R18
0001af d2af      	RCALL __GETW1P
0001b0 23ff      	TST  R31
0001b1 f00a      	BRMI _0x200001A
0001b2 d257      	RCALL SUBOPT_0x8
                 _0x200001A:
0001b3 c005      	RJMP _0x200001B
                 _0x2000016:
0001b4 01d9      	MOVW R26,R18
0001b5 efef      	LDI  R30,LOW(65535)
0001b6 efff      	LDI  R31,HIGH(65535)
0001b7 93ed      	ST   X+,R30
0001b8 93fc      	ST   X,R31
                 _0x200001B:
0001b9 d285      	RCALL __LOADLOCR6
0001ba 9627      	ADIW R28,7
0001bb 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0001bc 93ba      	ST   -Y,R27
0001bd 93aa      	ST   -Y,R26
0001be 9726      	SBIW R28,6
0001bf d278      	RCALL __SAVELOCR6
0001c0 e010      	LDI  R17,0
0001c1 85ac      	LDD  R26,Y+12
0001c2 85bd      	LDD  R27,Y+12+1
0001c3 e0e0      	LDI  R30,LOW(0)
0001c4 e0f0      	LDI  R31,HIGH(0)
0001c5 93ed      	ST   X+,R30
0001c6 93fc      	ST   X,R31
                 _0x200001C:
0001c7 89ea      	LDD  R30,Y+18
0001c8 89fb      	LDD  R31,Y+18+1
0001c9 9631      	ADIW R30,1
0001ca 8bea      	STD  Y+18,R30
0001cb 8bfb      	STD  Y+18+1,R31
0001cc 9731      	SBIW R30,1
0001cd 91e4      	LPM  R30,Z
0001ce 2f2e      	MOV  R18,R30
0001cf 30e0      	CPI  R30,0
0001d0 f409      	BRNE PC+2
0001d1 c109      	RJMP _0x200001E
0001d2 2fe1      	MOV  R30,R17
0001d3 30e0      	CPI  R30,0
0001d4 f431      	BRNE _0x2000022
0001d5 3225      	CPI  R18,37
0001d6 f411      	BRNE _0x2000023
0001d7 e011      	LDI  R17,LOW(1)
0001d8 c001      	RJMP _0x2000024
                 _0x2000023:
0001d9 d236      	RCALL SUBOPT_0x9
                 _0x2000024:
0001da c0ff      	RJMP _0x2000021
                 _0x2000022:
0001db 30e1      	CPI  R30,LOW(0x1)
0001dc f4a1      	BRNE _0x2000025
0001dd 3225      	CPI  R18,37
0001de f411      	BRNE _0x2000026
0001df d230      	RCALL SUBOPT_0x9
0001e0 c0f8      	RJMP _0x20000D2
                 _0x2000026:
0001e1 e012      	LDI  R17,LOW(2)
0001e2 e040      	LDI  R20,LOW(0)
0001e3 e000      	LDI  R16,LOW(0)
0001e4 322d      	CPI  R18,45
0001e5 f411      	BRNE _0x2000027
0001e6 e001      	LDI  R16,LOW(1)
0001e7 c0f2      	RJMP _0x2000021
                 _0x2000027:
0001e8 322b      	CPI  R18,43
0001e9 f411      	BRNE _0x2000028
0001ea e24b      	LDI  R20,LOW(43)
0001eb c0ee      	RJMP _0x2000021
                 _0x2000028:
0001ec 3220      	CPI  R18,32
0001ed f411      	BRNE _0x2000029
0001ee e240      	LDI  R20,LOW(32)
0001ef c0ea      	RJMP _0x2000021
                 _0x2000029:
0001f0 c002      	RJMP _0x200002A
                 _0x2000025:
0001f1 30e2      	CPI  R30,LOW(0x2)
0001f2 f439      	BRNE _0x200002B
                 _0x200002A:
0001f3 e050      	LDI  R21,LOW(0)
0001f4 e013      	LDI  R17,LOW(3)
0001f5 3320      	CPI  R18,48
0001f6 f411      	BRNE _0x200002C
0001f7 6800      	ORI  R16,LOW(128)
0001f8 c0e1      	RJMP _0x2000021
                 _0x200002C:
0001f9 c003      	RJMP _0x200002D
                 _0x200002B:
0001fa 30e3      	CPI  R30,LOW(0x3)
0001fb f009      	BREQ PC+2
0001fc c0dd      	RJMP _0x2000021
                 _0x200002D:
0001fd 3320      	CPI  R18,48
0001fe f010      	BRLO _0x2000030
0001ff 332a      	CPI  R18,58
000200 f008      	BRLO _0x2000031
                 _0x2000030:
000201 c007      	RJMP _0x200002F
                 _0x2000031:
000202 e0aa      	LDI  R26,LOW(10)
000203 9f5a      	MUL  R21,R26
000204 2d50      	MOV  R21,R0
000205 2fe2      	MOV  R30,R18
000206 53e0      	SUBI R30,LOW(48)
000207 0f5e      	ADD  R21,R30
000208 c0d1      	RJMP _0x2000021
                 _0x200002F:
000209 2fe2      	MOV  R30,R18
00020a 36e3      	CPI  R30,LOW(0x63)
00020b f439      	BRNE _0x2000035
00020c d20a      	RCALL SUBOPT_0xA
00020d 89e8      	LDD  R30,Y+16
00020e 89f9      	LDD  R31,Y+16+1
00020f 81a4      	LDD  R26,Z+4
000210 93aa      	ST   -Y,R26
000211 d20b      	RCALL SUBOPT_0xB
000212 c0c6      	RJMP _0x2000036
                 _0x2000035:
000213 37e3      	CPI  R30,LOW(0x73)
000214 f429      	BRNE _0x2000038
000215 d201      	RCALL SUBOPT_0xA
000216 d20c      	RCALL SUBOPT_0xC
000217 d196      	RCALL _strlen
000218 2f1e      	MOV  R17,R30
000219 c007      	RJMP _0x2000039
                 _0x2000038:
00021a 37e0      	CPI  R30,LOW(0x70)
00021b f449      	BRNE _0x200003B
00021c d1fa      	RCALL SUBOPT_0xA
00021d d205      	RCALL SUBOPT_0xC
00021e d19b      	RCALL _strlenf
00021f 2f1e      	MOV  R17,R30
000220 6008      	ORI  R16,LOW(8)
                 _0x2000039:
000221 6002      	ORI  R16,LOW(2)
000222 770f      	ANDI R16,LOW(127)
000223 e030      	LDI  R19,LOW(0)
000224 c038      	RJMP _0x200003C
                 _0x200003B:
000225 36e4      	CPI  R30,LOW(0x64)
000226 f011      	BREQ _0x200003F
000227 36e9      	CPI  R30,LOW(0x69)
000228 f411      	BRNE _0x2000040
                 _0x200003F:
000229 6004      	ORI  R16,LOW(4)
00022a c002      	RJMP _0x2000041
                 _0x2000040:
00022b 37e5      	CPI  R30,LOW(0x75)
00022c f431      	BRNE _0x2000042
                 _0x2000041:
00022d e7ec      	LDI  R30,LOW(_tbl10_G100*2)
00022e e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00022f 83ee      	STD  Y+6,R30
000230 83ff      	STD  Y+6+1,R31
000231 e015      	LDI  R17,LOW(5)
000232 c00c      	RJMP _0x2000043
                 _0x2000042:
000233 35e8      	CPI  R30,LOW(0x58)
000234 f411      	BRNE _0x2000045
000235 6008      	ORI  R16,LOW(8)
000236 c003      	RJMP _0x2000046
                 _0x2000045:
000237 37e8      	CPI  R30,LOW(0x78)
000238 f009      	BREQ PC+2
000239 c09f      	RJMP _0x2000077
                 _0x2000046:
00023a e8e6      	LDI  R30,LOW(_tbl16_G100*2)
00023b e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00023c 83ee      	STD  Y+6,R30
00023d 83ff      	STD  Y+6+1,R31
00023e e014      	LDI  R17,LOW(4)
                 _0x2000043:
00023f ff02      	SBRS R16,2
000240 c015      	RJMP _0x2000048
000241 d1d5      	RCALL SUBOPT_0xA
000242 89a8      	LDD  R26,Y+16
000243 89b9      	LDD  R27,Y+16+1
000244 9614      	ADIW R26,4
000245 91ed      	LD   R30,X+
000246 91fd      	LD   R31,X+
000247 87ea      	STD  Y+10,R30
000248 87fb      	STD  Y+10+1,R31
000249 85ab      	LDD  R26,Y+11
00024a 23aa      	TST  R26
00024b f422      	BRPL _0x2000049
00024c d201      	RCALL __ANEGW1
00024d 87ea      	STD  Y+10,R30
00024e 87fb      	STD  Y+10+1,R31
00024f e24d      	LDI  R20,LOW(45)
                 _0x2000049:
000250 3040      	CPI  R20,0
000251 f011      	BREQ _0x200004A
000252 5f1f      	SUBI R17,-LOW(1)
000253 c001      	RJMP _0x200004B
                 _0x200004A:
000254 7f0b      	ANDI R16,LOW(251)
                 _0x200004B:
000255 c007      	RJMP _0x200004C
                 _0x2000048:
000256 d1c0      	RCALL SUBOPT_0xA
000257 89a8      	LDD  R26,Y+16
000258 89b9      	LDD  R27,Y+16+1
000259 9614      	ADIW R26,4
00025a d204      	RCALL __GETW1P
00025b 87ea      	STD  Y+10,R30
00025c 87fb      	STD  Y+10+1,R31
                 _0x200004C:
                 _0x200003C:
00025d fd00      	SBRC R16,0
00025e c010      	RJMP _0x200004D
                 _0x200004E:
00025f 1715      	CP   R17,R21
000260 f470      	BRSH _0x2000050
000261 ff07      	SBRS R16,7
000262 c008      	RJMP _0x2000051
000263 ff02      	SBRS R16,2
000264 c004      	RJMP _0x2000052
000265 7f0b      	ANDI R16,LOW(251)
000266 2f24      	MOV  R18,R20
000267 5011      	SUBI R17,LOW(1)
000268 c001      	RJMP _0x2000053
                 _0x2000052:
000269 e320      	LDI  R18,LOW(48)
                 _0x2000053:
00026a c001      	RJMP _0x2000054
                 _0x2000051:
00026b e220      	LDI  R18,LOW(32)
                 _0x2000054:
00026c d1a3      	RCALL SUBOPT_0x9
00026d 5051      	SUBI R21,LOW(1)
00026e cff0      	RJMP _0x200004E
                 _0x2000050:
                 _0x200004D:
00026f 2f31      	MOV  R19,R17
000270 ff01      	SBRS R16,1
000271 c016      	RJMP _0x2000055
                 _0x2000056:
000272 3030      	CPI  R19,0
000273 f099      	BREQ _0x2000058
000274 ff03      	SBRS R16,3
000275 c006      	RJMP _0x2000059
000276 81ee      	LDD  R30,Y+6
000277 81ff      	LDD  R31,Y+6+1
000278 9125      	LPM  R18,Z+
000279 83ee      	STD  Y+6,R30
00027a 83ff      	STD  Y+6+1,R31
00027b c005      	RJMP _0x200005A
                 _0x2000059:
00027c 81ae      	LDD  R26,Y+6
00027d 81bf      	LDD  R27,Y+6+1
00027e 912d      	LD   R18,X+
00027f 83ae      	STD  Y+6,R26
000280 83bf      	STD  Y+6+1,R27
                 _0x200005A:
000281 d18e      	RCALL SUBOPT_0x9
000282 3050      	CPI  R21,0
000283 f009      	BREQ _0x200005B
000284 5051      	SUBI R21,LOW(1)
                 _0x200005B:
000285 5031      	SUBI R19,LOW(1)
000286 cfeb      	RJMP _0x2000056
                 _0x2000058:
000287 c048      	RJMP _0x200005C
                 _0x2000055:
                 _0x200005E:
000288 e320      	LDI  R18,LOW(48)
000289 81ee      	LDD  R30,Y+6
00028a 81ff      	LDD  R31,Y+6+1
00028b d1d7      	RCALL __GETW1PF
00028c 87e8      	STD  Y+8,R30
00028d 87f9      	STD  Y+8+1,R31
00028e 81ee      	LDD  R30,Y+6
00028f 81ff      	LDD  R31,Y+6+1
000290 9632      	ADIW R30,2
000291 83ee      	STD  Y+6,R30
000292 83ff      	STD  Y+6+1,R31
                 _0x2000060:
000293 85e8      	LDD  R30,Y+8
000294 85f9      	LDD  R31,Y+8+1
000295 85aa      	LDD  R26,Y+10
000296 85bb      	LDD  R27,Y+10+1
000297 17ae      	CP   R26,R30
000298 07bf      	CPC  R27,R31
000299 f050      	BRLO _0x2000062
00029a 5f2f      	SUBI R18,-LOW(1)
00029b 85a8      	LDD  R26,Y+8
00029c 85b9      	LDD  R27,Y+8+1
00029d 85ea      	LDD  R30,Y+10
00029e 85fb      	LDD  R31,Y+10+1
00029f 1bea      	SUB  R30,R26
0002a0 0bfb      	SBC  R31,R27
0002a1 87ea      	STD  Y+10,R30
0002a2 87fb      	STD  Y+10+1,R31
0002a3 cfef      	RJMP _0x2000060
                 _0x2000062:
0002a4 332a      	CPI  R18,58
0002a5 f028      	BRLO _0x2000063
0002a6 ff03      	SBRS R16,3
0002a7 c002      	RJMP _0x2000064
0002a8 5f29      	SUBI R18,-LOW(7)
0002a9 c001      	RJMP _0x2000065
                 _0x2000064:
0002aa 5d29      	SUBI R18,-LOW(39)
                 _0x2000065:
                 _0x2000063:
0002ab fd04      	SBRC R16,4
0002ac c019      	RJMP _0x2000067
0002ad 3321      	CPI  R18,49
0002ae f420      	BRSH _0x2000069
0002af 85a8      	LDD  R26,Y+8
0002b0 85b9      	LDD  R27,Y+8+1
0002b1 9711      	SBIW R26,1
0002b2 f409      	BRNE _0x2000068
                 _0x2000069:
0002b3 c009      	RJMP _0x20000D3
                 _0x2000068:
0002b4 1753      	CP   R21,R19
0002b5 f010      	BRLO _0x200006D
0002b6 ff00      	SBRS R16,0
0002b7 c001      	RJMP _0x200006E
                 _0x200006D:
0002b8 c011      	RJMP _0x200006C
                 _0x200006E:
0002b9 e220      	LDI  R18,LOW(32)
0002ba ff07      	SBRS R16,7
0002bb c00a      	RJMP _0x200006F
0002bc e320      	LDI  R18,LOW(48)
                 _0x20000D3:
0002bd 6100      	ORI  R16,LOW(16)
0002be ff02      	SBRS R16,2
0002bf c006      	RJMP _0x2000070
0002c0 7f0b      	ANDI R16,LOW(251)
0002c1 934a      	ST   -Y,R20
0002c2 d15a      	RCALL SUBOPT_0xB
0002c3 3050      	CPI  R21,0
0002c4 f009      	BREQ _0x2000071
0002c5 5051      	SUBI R21,LOW(1)
                 _0x2000071:
                 _0x2000070:
                 _0x200006F:
                 _0x2000067:
0002c6 d149      	RCALL SUBOPT_0x9
0002c7 3050      	CPI  R21,0
0002c8 f009      	BREQ _0x2000072
0002c9 5051      	SUBI R21,LOW(1)
                 _0x2000072:
                 _0x200006C:
0002ca 5031      	SUBI R19,LOW(1)
0002cb 85a8      	LDD  R26,Y+8
0002cc 85b9      	LDD  R27,Y+8+1
0002cd 9712      	SBIW R26,2
0002ce f008      	BRLO _0x200005F
0002cf cfb8      	RJMP _0x200005E
                 _0x200005F:
                 _0x200005C:
0002d0 ff00      	SBRS R16,0
0002d1 c007      	RJMP _0x2000073
                 _0x2000074:
0002d2 3050      	CPI  R21,0
0002d3 f029      	BREQ _0x2000076
0002d4 5051      	SUBI R21,LOW(1)
0002d5 e2e0      	LDI  R30,LOW(32)
0002d6 93ea      	ST   -Y,R30
0002d7 d145      	RCALL SUBOPT_0xB
0002d8 cff9      	RJMP _0x2000074
                 _0x2000076:
                 _0x2000073:
                 _0x2000077:
                 _0x2000036:
                 _0x20000D2:
0002d9 e010      	LDI  R17,LOW(0)
                 _0x2000021:
0002da ceec      	RJMP _0x200001C
                 _0x200001E:
0002db 85ac      	LDD  R26,Y+12
0002dc 85bd      	LDD  R27,Y+12+1
0002dd 91ed      	LD   R30,X+
0002de 91fd      	LD   R31,X+
0002df d15f      	RCALL __LOADLOCR6
0002e0 9664      	ADIW R28,20
0002e1 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002e2 92ff      	PUSH R15
0002e3 2ef8      	MOV  R15,R24
0002e4 9726      	SBIW R28,6
0002e5 d152      	RCALL __SAVELOCR6
0002e6 01fe      	MOVW R30,R28
0002e7 d15e      	RCALL __ADDW1R15
                +
0002e8 8546     +LDD R20 , Z + 14
0002e9 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
0002ea 2e04      	MOV  R0,R20
0002eb 2a05      	OR   R0,R21
0002ec f419      	BRNE _0x2000078
0002ed efef      	LDI  R30,LOW(65535)
0002ee efff      	LDI  R31,HIGH(65535)
0002ef c01f      	RJMP _0x2080002
                 _0x2000078:
0002f0 01de      	MOVW R26,R28
0002f1 9618      	ADIW R26,8
0002f2 d157      	RCALL __ADDW2R15
0002f3 018d      	MOVW R16,R26
                +
0002f4 8748     +STD Y + 8 , R20
0002f5 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
0002f6 e0e0      	LDI  R30,LOW(0)
0002f7 87ea      	STD  Y+10,R30
0002f8 87eb      	STD  Y+10+1,R30
0002f9 01de      	MOVW R26,R28
0002fa 961c      	ADIW R26,12
0002fb d14e      	RCALL __ADDW2R15
0002fc 91ed      	LD   R30,X+
0002fd 91fd      	LD   R31,X+
0002fe 93fa      	ST   -Y,R31
0002ff 93ea      	ST   -Y,R30
000300 931a      	ST   -Y,R17
000301 930a      	ST   -Y,R16
000302 e9e1      	LDI  R30,LOW(_put_buff_G100)
000303 e0f1      	LDI  R31,HIGH(_put_buff_G100)
000304 93fa      	ST   -Y,R31
000305 93ea      	ST   -Y,R30
000306 01de      	MOVW R26,R28
000307 961c      	ADIW R26,12
000308 deb3      	RCALL __print_G100
000309 019f      	MOVW R18,R30
00030a 85a8      	LDD  R26,Y+8
00030b 85b9      	LDD  R27,Y+8+1
00030c e0e0      	LDI  R30,LOW(0)
00030d 93ec      	ST   X,R30
00030e 01f9      	MOVW R30,R18
                 _0x2080002:
00030f d12f      	RCALL __LOADLOCR6
000310 962c      	ADIW R28,12
000311 90ff      	POP  R15
000312 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000313 931a      	ST   -Y,R17
000314 2f1a      	MOV  R17,R26
000315 ff14      	SBRS R17,4
000316 c002      	RJMP _0x2020004
000317 9a2b      	SBI  0x5,3
000318 c001      	RJMP _0x2020005
                 _0x2020004:
000319 982b      	CBI  0x5,3
                 _0x2020005:
00031a ff15      	SBRS R17,5
00031b c002      	RJMP _0x2020006
00031c 9a2c      	SBI  0x5,4
00031d c001      	RJMP _0x2020007
                 _0x2020006:
00031e 982c      	CBI  0x5,4
                 _0x2020007:
00031f ff16      	SBRS R17,6
000320 c002      	RJMP _0x2020008
000321 9a2d      	SBI  0x5,5
000322 c001      	RJMP _0x2020009
                 _0x2020008:
000323 982d      	CBI  0x5,5
                 _0x2020009:
000324 ff17      	SBRS R17,7
000325 c002      	RJMP _0x202000A
000326 9a2e      	SBI  0x5,6
000327 c001      	RJMP _0x202000B
                 _0x202000A:
000328 982e      	CBI  0x5,6
                 _0x202000B:
                +
000329 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00032a 958a     +DEC R24
00032b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00032c 9a2a      	SBI  0x5,2
                +
00032d e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00032e 958a     +DEC R24
00032f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000330 982a      	CBI  0x5,2
                +
000331 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000332 958a     +DEC R24
000333 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000334 c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000335 93aa      	ST   -Y,R26
000336 81a8      	LD   R26,Y
000337 dfdb      	RCALL __lcd_write_nibble_G101
000338 81e8          ld    r30,y
000339 95e2          swap  r30
00033a 83e8          st    y,r30
00033b 81a8      	LD   R26,Y
00033c dfd6      	RCALL __lcd_write_nibble_G101
                +
00033d ef8a     +LDI R24 , LOW ( 250 )
00033e e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
00033f 9701     +SBIW R24 , 1
000340 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
000341 9621      	ADIW R28,1
000342 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000343 931a      	ST   -Y,R17
000344 930a      	ST   -Y,R16
000345 2f1a      	MOV  R17,R26
000346 810a      	LDD  R16,Y+2
000347 2fe1      	MOV  R30,R17
000348 e0f0      	LDI  R31,0
000349 5aef      	SUBI R30,LOW(-__base_y_G101)
00034a 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00034b 81e0      	LD   R30,Z
00034c 0fe0      	ADD  R30,R16
00034d 2fae      	MOV  R26,R30
00034e dfe6      	RCALL __lcd_write_data
00034f 2e40      	MOV  R4,R16
000350 2e31      	MOV  R3,R17
000351 8119      	LDD  R17,Y+1
000352 8108      	LDD  R16,Y+0
000353 9623      	ADIW R28,3
000354 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000355 e0a2      	LDI  R26,LOW(2)
000356 d0d6      	RCALL SUBOPT_0xD
000357 e0ac      	LDI  R26,LOW(12)
000358 dfdc      	RCALL __lcd_write_data
000359 e0a1      	LDI  R26,LOW(1)
00035a d0d2      	RCALL SUBOPT_0xD
00035b e0e0      	LDI  R30,LOW(0)
00035c 2e3e      	MOV  R3,R30
00035d 2e4e      	MOV  R4,R30
00035e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00035f 931a      	ST   -Y,R17
000360 2f1a      	MOV  R17,R26
000361 301a      	CPI  R17,10
000362 f011      	BREQ _0x2020011
000363 1446      	CP   R4,R6
000364 f040      	BRLO _0x2020010
                 _0x2020011:
000365 e0e0      	LDI  R30,LOW(0)
000366 93ea      	ST   -Y,R30
000367 9433      	INC  R3
000368 2da3      	MOV  R26,R3
000369 dfd9      	RCALL _lcd_gotoxy
00036a 301a      	CPI  R17,10
00036b f409      	BRNE _0x2020013
00036c c03f      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
00036d 9443      	INC  R4
00036e 9a28      	SBI  0x5,0
00036f 2fa1      	MOV  R26,R17
000370 dfc4      	RCALL __lcd_write_data
000371 9828      	CBI  0x5,0
000372 c039      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000373 d0c6      	RCALL __SAVELOCR4
000374 019d      	MOVW R18,R26
                 _0x2020014:
000375 01d9      	MOVW R26,R18
                +
000376 5f2f     +SUBI R18 , LOW ( - 1 )
000377 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000378 91ec      	LD   R30,X
000379 2f1e      	MOV  R17,R30
00037a 30e0      	CPI  R30,0
00037b f019      	BREQ _0x2020016
00037c 2fa1      	MOV  R26,R17
00037d dfe1      	RCALL _lcd_putchar
00037e cff6      	RJMP _0x2020014
                 _0x2020016:
00037f d0c1      	RCALL __LOADLOCR4
000380 9624      	ADIW R28,4
000381 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000382 931a      	ST   -Y,R17
000383 2f1a      	MOV  R17,R26
000384 9a23      	SBI  0x4,3
000385 9a24      	SBI  0x4,4
000386 9a25      	SBI  0x4,5
000387 9a26      	SBI  0x4,6
000388 9a22      	SBI  0x4,2
000389 9a20      	SBI  0x4,0
00038a 9a21      	SBI  0x4,1
00038b 982a      	CBI  0x5,2
00038c 9828      	CBI  0x5,0
00038d 9829      	CBI  0x5,1
00038e 2e61      	MOV  R6,R17
00038f 2fe1      	MOV  R30,R17
000390 58e0      	SUBI R30,-LOW(128)
                +
000391 93e0 0253+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000393 2fe1      	MOV  R30,R17
000394 54e0      	SUBI R30,-LOW(192)
                +
000395 93e0 0254+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000397 e1a4      	LDI  R26,LOW(20)
000398 e0b0      	LDI  R27,0
000399 d24c      	RCALL _delay_ms
00039a d096      	RCALL SUBOPT_0xE
00039b d095      	RCALL SUBOPT_0xE
00039c d094      	RCALL SUBOPT_0xE
00039d e2a0      	LDI  R26,LOW(32)
00039e df74      	RCALL __lcd_write_nibble_G101
                +
00039f ef84     +LDI R24 , LOW ( 500 )
0003a0 e091     +LDI R25 , HIGH ( 500 )
                +__DELAY_USW_LOOP :
0003a1 9701     +SBIW R24 , 1
0003a2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 500
0003a3 e2a8      	LDI  R26,LOW(40)
0003a4 df90      	RCALL __lcd_write_data
0003a5 e0a4      	LDI  R26,LOW(4)
0003a6 df8e      	RCALL __lcd_write_data
0003a7 e8a5      	LDI  R26,LOW(133)
0003a8 df8c      	RCALL __lcd_write_data
0003a9 e0a6      	LDI  R26,LOW(6)
0003aa df8a      	RCALL __lcd_write_data
0003ab dfa9      	RCALL _lcd_clear
                 _0x2080001:
0003ac 9119      	LD   R17,Y+
0003ad 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003ae 93ba      	ST   -Y,R27
0003af 93aa      	ST   -Y,R26
0003b0 91a9          ld   r26,y+
0003b1 91b9          ld   r27,y+
0003b2 27ee          clr  r30
0003b3 27ff          clr  r31
                 strlen0:
0003b4 916d          ld   r22,x+
0003b5 2366          tst  r22
0003b6 f011          breq strlen1
0003b7 9631          adiw r30,1
0003b8 cffb          rjmp strlen0
                 strlen1:
0003b9 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003ba 93ba      	ST   -Y,R27
0003bb 93aa      	ST   -Y,R26
0003bc 27aa          clr  r26
0003bd 27bb          clr  r27
0003be 91e9          ld   r30,y+
0003bf 91f9          ld   r31,y+
                 strlenf0:
0003c0 9005      	lpm  r0,z+
0003c1 2000          tst  r0
0003c2 f011          breq strlenf1
0003c3 9611          adiw r26,1
0003c4 cffb          rjmp strlenf0
                 strlenf1:
0003c5 01fd          movw r30,r26
0003c6 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _TemperatureC:
000227           	.BYTE 0xA
                 _TemperatureF:
000231           	.BYTE 0xA
                 _TemperatureK:
00023b           	.BYTE 0xA
                 _celsius:
000245           	.BYTE 0x4
                 _fahren:
000249           	.BYTE 0x4
                 _kelvin:
00024d           	.BYTE 0x4
                 __base_y_G101:
000251           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0003c7 93e0 0245 	STS  _celsius,R30
0003c9 93f0 0246 	STS  _celsius+1,R31
0003cb 9360 0247 	STS  _celsius+2,R22
0003cd 9370 0248 	STS  _celsius+3,R23
0003cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0003d0 91a0 0245 	LDS  R26,_celsius
0003d2 91b0 0246 	LDS  R27,_celsius+1
0003d4 9180 0247 	LDS  R24,_celsius+2
0003d6 9190 0248 	LDS  R25,_celsius+3
0003d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x2:
0003d9 91e0 0245 	LDS  R30,_celsius
0003db 91f0 0246 	LDS  R31,_celsius+1
0003dd 9160 0247 	LDS  R22,_celsius+2
0003df 9170 0248 	LDS  R23,_celsius+3
0003e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x3:
0003e2 d0b8      	RCALL __CFD1
0003e3 d076      	RCALL __CWD1
0003e4 d082      	RCALL __PUTPARD1
                +
0003e5 edef     +LDI R30 , LOW ( 0xDF )
0003e6 e0f0     +LDI R31 , HIGH ( 0xDF )
0003e7 e060     +LDI R22 , BYTE3 ( 0xDF )
0003e8 e070     +LDI R23 , BYTE4 ( 0xDF )
                 	__GETD1N 0xDF
0003e9 d07d      	RCALL __PUTPARD1
0003ea e088      	LDI  R24,8
0003eb def6      	RCALL _sprintf
0003ec 962c      	ADIW R28,12
0003ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0003ee 93e0 0249 	STS  _fahren,R30
0003f0 93f0 024a 	STS  _fahren+1,R31
0003f2 9360 024b 	STS  _fahren+2,R22
0003f4 9370 024c 	STS  _fahren+3,R23
0003f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
0003f7 91e0 0249 	LDS  R30,_fahren
0003f9 91f0 024a 	LDS  R31,_fahren+1
0003fb 9160 024b 	LDS  R22,_fahren+2
0003fd 9170 024c 	LDS  R23,_fahren+3
0003ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
000400 df54      	RCALL _lcd_clear
000401 e0e0      	LDI  R30,LOW(0)
000402 93ea      	ST   -Y,R30
000403 e0a0      	LDI  R26,LOW(0)
000404 cf3e      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
000405 df6d      	RCALL _lcd_puts
000406 e0e0      	LDI  R30,LOW(0)
000407 93ea      	ST   -Y,R30
000408 e0a1      	LDI  R26,LOW(1)
000409 cf39      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
00040a 91ed      	LD   R30,X+
00040b 91fd      	LD   R31,X+
00040c 9631      	ADIW R30,1
00040d 93fe      	ST   -X,R31
00040e 93ee      	ST   -X,R30
00040f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x9:
000410 932a      	ST   -Y,R18
000411 85ad      	LDD  R26,Y+13
000412 85be      	LDD  R27,Y+13+1
000413 85ef      	LDD  R30,Y+15
000414 89f8      	LDD  R31,Y+15+1
000415 9509      	ICALL
000416 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xA:
000417 89e8      	LDD  R30,Y+16
000418 89f9      	LDD  R31,Y+16+1
000419 9734      	SBIW R30,4
00041a 8be8      	STD  Y+16,R30
00041b 8bf9      	STD  Y+16+1,R31
00041c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xB:
00041d 85ad      	LDD  R26,Y+13
00041e 85be      	LDD  R27,Y+13+1
00041f 85ef      	LDD  R30,Y+15
000420 89f8      	LDD  R31,Y+15+1
000421 9509      	ICALL
000422 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xC:
000423 89a8      	LDD  R26,Y+16
000424 89b9      	LDD  R27,Y+16+1
000425 9614      	ADIW R26,4
000426 91ed      	LD   R30,X+
000427 91fd      	LD   R31,X+
000428 83ee      	STD  Y+6,R30
000429 83ff      	STD  Y+6+1,R31
00042a 81ae      	LDD  R26,Y+6
00042b 81bf      	LDD  R27,Y+6+1
00042c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
00042d df07      	RCALL __lcd_write_data
00042e e0a3      	LDI  R26,LOW(3)
00042f e0b0      	LDI  R27,0
000430 c1b5      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xE:
000431 e3a0      	LDI  R26,LOW(48)
000432 dee0      	RCALL __lcd_write_nibble_G101
                +
000433 ef84     +LDI R24 , LOW ( 500 )
000434 e091     +LDI R25 , HIGH ( 500 )
                +__DELAY_USW_LOOP :
000435 9701     +SBIW R24 , 1
000436 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 500
000437 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000438 935a      	ST   -Y,R21
                 __SAVELOCR5:
000439 934a      	ST   -Y,R20
                 __SAVELOCR4:
00043a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00043b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00043c 931a      	ST   -Y,R17
00043d 930a      	ST   -Y,R16
00043e 9508      	RET
                 
                 __LOADLOCR6:
00043f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000440 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000441 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000442 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000443 8119      	LDD  R17,Y+1
000444 8108      	LD   R16,Y
000445 9508      	RET
                 
                 __ADDW1R15:
000446 2400      	CLR  R0
000447 0def      	ADD  R30,R15
000448 1df0      	ADC  R31,R0
000449 9508      	RET
                 
                 __ADDW2R15:
00044a 2400      	CLR  R0
00044b 0daf      	ADD  R26,R15
00044c 1db0      	ADC  R27,R0
00044d 9508      	RET
                 
                 __ANEGW1:
00044e 95f1      	NEG  R31
00044f 95e1      	NEG  R30
000450 40f0      	SBCI R31,0
000451 9508      	RET
                 
                 __ANEGD1:
000452 95f0      	COM  R31
000453 9560      	COM  R22
000454 9570      	COM  R23
000455 95e1      	NEG  R30
000456 4fff      	SBCI R31,-1
000457 4f6f      	SBCI R22,-1
000458 4f7f      	SBCI R23,-1
000459 9508      	RET
                 
                 __CWD1:
00045a 2f6f      	MOV  R22,R31
00045b 0f66      	ADD  R22,R22
00045c 0b66      	SBC  R22,R22
00045d 2f76      	MOV  R23,R22
00045e 9508      	RET
                 
                 __GETW1P:
00045f 91ed      	LD   R30,X+
000460 91fc      	LD   R31,X
000461 9711      	SBIW R26,1
000462 9508      	RET
                 
                 __GETW1PF:
000463 9005      	LPM  R0,Z+
000464 91f4      	LPM  R31,Z
000465 2de0      	MOV  R30,R0
000466 9508      	RET
                 
                 __PUTPARD1:
000467 937a      	ST   -Y,R23
000468 936a      	ST   -Y,R22
000469 93fa      	ST   -Y,R31
00046a 93ea      	ST   -Y,R30
00046b 9508      	RET
                 
                 __ROUND_REPACK:
00046c 2355      	TST  R21
00046d f442      	BRPL __REPACK
00046e 3850      	CPI  R21,0x80
00046f f411      	BRNE __ROUND_REPACK0
000470 ffe0      	SBRS R30,0
000471 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000472 9631      	ADIW R30,1
000473 1f69      	ADC  R22,R25
000474 1f79      	ADC  R23,R25
000475 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000476 e850      	LDI  R21,0x80
000477 2757      	EOR  R21,R23
000478 f411      	BRNE __REPACK0
000479 935f      	PUSH R21
00047a c0c8      	RJMP __ZERORES
                 __REPACK0:
00047b 3f5f      	CPI  R21,0xFF
00047c f031      	BREQ __REPACK1
00047d 0f66      	LSL  R22
00047e 0c00      	LSL  R0
00047f 9557      	ROR  R21
000480 9567      	ROR  R22
000481 2f75      	MOV  R23,R21
000482 9508      	RET
                 __REPACK1:
000483 935f      	PUSH R21
000484 2000      	TST  R0
000485 f00a      	BRMI __REPACK2
000486 c0c7      	RJMP __MAXRES
                 __REPACK2:
000487 c0c0      	RJMP __MINRES
                 
                 __UNPACK:
000488 e850      	LDI  R21,0x80
000489 2e19      	MOV  R1,R25
00048a 2215      	AND  R1,R21
00048b 0f88      	LSL  R24
00048c 1f99      	ROL  R25
00048d 2795      	EOR  R25,R21
00048e 0f55      	LSL  R21
00048f 9587      	ROR  R24
                 
                 __UNPACK1:
000490 e850      	LDI  R21,0x80
000491 2e07      	MOV  R0,R23
000492 2205      	AND  R0,R21
000493 0f66      	LSL  R22
000494 1f77      	ROL  R23
000495 2775      	EOR  R23,R21
000496 0f55      	LSL  R21
000497 9567      	ROR  R22
000498 9508      	RET
                 
                 __CFD1U:
000499 9468      	SET
00049a c001      	RJMP __CFD1U0
                 __CFD1:
00049b 94e8      	CLT
                 __CFD1U0:
00049c 935f      	PUSH R21
00049d dff2      	RCALL __UNPACK1
00049e 3870      	CPI  R23,0x80
00049f f018      	BRLO __CFD10
0004a0 3f7f      	CPI  R23,0xFF
0004a1 f408      	BRCC __CFD10
0004a2 c0a0      	RJMP __ZERORES
                 __CFD10:
0004a3 e156      	LDI  R21,22
0004a4 1b57      	SUB  R21,R23
0004a5 f4aa      	BRPL __CFD11
0004a6 9551      	NEG  R21
0004a7 3058      	CPI  R21,8
0004a8 f40e      	BRTC __CFD19
0004a9 3059      	CPI  R21,9
                 __CFD19:
0004aa f030      	BRLO __CFD17
0004ab efef      	SER  R30
0004ac efff      	SER  R31
0004ad ef6f      	SER  R22
0004ae e77f      	LDI  R23,0x7F
0004af f977      	BLD  R23,7
0004b0 c01a      	RJMP __CFD15
                 __CFD17:
0004b1 2777      	CLR  R23
0004b2 2355      	TST  R21
0004b3 f0b9      	BREQ __CFD15
                 __CFD18:
0004b4 0fee      	LSL  R30
0004b5 1fff      	ROL  R31
0004b6 1f66      	ROL  R22
0004b7 1f77      	ROL  R23
0004b8 955a      	DEC  R21
0004b9 f7d1      	BRNE __CFD18
0004ba c010      	RJMP __CFD15
                 __CFD11:
0004bb 2777      	CLR  R23
                 __CFD12:
0004bc 3058      	CPI  R21,8
0004bd f028      	BRLO __CFD13
0004be 2fef      	MOV  R30,R31
0004bf 2ff6      	MOV  R31,R22
0004c0 2f67      	MOV  R22,R23
0004c1 5058      	SUBI R21,8
0004c2 cff9      	RJMP __CFD12
                 __CFD13:
0004c3 2355      	TST  R21
0004c4 f031      	BREQ __CFD15
                 __CFD14:
0004c5 9576      	LSR  R23
0004c6 9567      	ROR  R22
0004c7 95f7      	ROR  R31
0004c8 95e7      	ROR  R30
0004c9 955a      	DEC  R21
0004ca f7d1      	BRNE __CFD14
                 __CFD15:
0004cb 2000      	TST  R0
0004cc f40a      	BRPL __CFD16
0004cd df84      	RCALL __ANEGD1
                 __CFD16:
0004ce 915f      	POP  R21
0004cf 9508      	RET
                 
                 __CDF1U:
0004d0 9468      	SET
0004d1 c001      	RJMP __CDF1U0
                 __CDF1:
0004d2 94e8      	CLT
                 __CDF1U0:
0004d3 9730      	SBIW R30,0
0004d4 4060      	SBCI R22,0
0004d5 4070      	SBCI R23,0
0004d6 f0b1      	BREQ __CDF10
0004d7 2400      	CLR  R0
0004d8 f026      	BRTS __CDF11
0004d9 2377      	TST  R23
0004da f412      	BRPL __CDF11
0004db 9400      	COM  R0
0004dc df75      	RCALL __ANEGD1
                 __CDF11:
0004dd 2e17      	MOV  R1,R23
0004de e17e      	LDI  R23,30
0004df 2011      	TST  R1
                 __CDF12:
0004e0 f032      	BRMI __CDF13
0004e1 957a      	DEC  R23
0004e2 0fee      	LSL  R30
0004e3 1fff      	ROL  R31
0004e4 1f66      	ROL  R22
0004e5 1c11      	ROL  R1
0004e6 cff9      	RJMP __CDF12
                 __CDF13:
0004e7 2fef      	MOV  R30,R31
0004e8 2ff6      	MOV  R31,R22
0004e9 2d61      	MOV  R22,R1
0004ea 935f      	PUSH R21
0004eb df8a      	RCALL __REPACK
0004ec 915f      	POP  R21
                 __CDF10:
0004ed 9508      	RET
                 
                 __SWAPACC:
0004ee 934f      	PUSH R20
0004ef 01af      	MOVW R20,R30
0004f0 01fd      	MOVW R30,R26
0004f1 01da      	MOVW R26,R20
0004f2 01ab      	MOVW R20,R22
0004f3 01bc      	MOVW R22,R24
0004f4 01ca      	MOVW R24,R20
0004f5 2d40      	MOV  R20,R0
0004f6 2c01      	MOV  R0,R1
0004f7 2e14      	MOV  R1,R20
0004f8 914f      	POP  R20
0004f9 9508      	RET
                 
                 __UADD12:
0004fa 0fea      	ADD  R30,R26
0004fb 1ffb      	ADC  R31,R27
0004fc 1f68      	ADC  R22,R24
0004fd 9508      	RET
                 
                 __NEGMAN1:
0004fe 95e0      	COM  R30
0004ff 95f0      	COM  R31
000500 9560      	COM  R22
000501 5fef      	SUBI R30,-1
000502 4fff      	SBCI R31,-1
000503 4f6f      	SBCI R22,-1
000504 9508      	RET
                 
                 __ADDF12:
000505 935f      	PUSH R21
000506 df81      	RCALL __UNPACK
000507 3890      	CPI  R25,0x80
000508 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000509 3870      	CPI  R23,0x80
00050a f121      	BREQ __ADDF128
                 __ADDF121:
00050b 2f57      	MOV  R21,R23
00050c 1b59      	SUB  R21,R25
00050d f12b      	BRVS __ADDF1211
00050e f412      	BRPL __ADDF122
00050f dfde      	RCALL __SWAPACC
000510 cffa      	RJMP __ADDF121
                 __ADDF122:
000511 3158      	CPI  R21,24
000512 f018      	BRLO __ADDF123
000513 27aa      	CLR  R26
000514 27bb      	CLR  R27
000515 2788      	CLR  R24
                 __ADDF123:
000516 3058      	CPI  R21,8
000517 f028      	BRLO __ADDF124
000518 2fab      	MOV  R26,R27
000519 2fb8      	MOV  R27,R24
00051a 2788      	CLR  R24
00051b 5058      	SUBI R21,8
00051c cff9      	RJMP __ADDF123
                 __ADDF124:
00051d 2355      	TST  R21
00051e f029      	BREQ __ADDF126
                 __ADDF125:
00051f 9586      	LSR  R24
000520 95b7      	ROR  R27
000521 95a7      	ROR  R26
000522 955a      	DEC  R21
000523 f7d9      	BRNE __ADDF125
                 __ADDF126:
000524 2d50      	MOV  R21,R0
000525 2551      	EOR  R21,R1
000526 f072      	BRMI __ADDF127
000527 dfd2      	RCALL __UADD12
000528 f438      	BRCC __ADDF129
000529 9567      	ROR  R22
00052a 95f7      	ROR  R31
00052b 95e7      	ROR  R30
00052c 9573      	INC  R23
00052d f413      	BRVC __ADDF129
00052e c01f      	RJMP __MAXRES
                 __ADDF128:
00052f dfbe      	RCALL __SWAPACC
                 __ADDF129:
000530 df45      	RCALL __REPACK
000531 915f      	POP  R21
000532 9508      	RET
                 __ADDF1211:
000533 f7d8      	BRCC __ADDF128
000534 cffb      	RJMP __ADDF129
                 __ADDF127:
000535 1bea      	SUB  R30,R26
000536 0bfb      	SBC  R31,R27
000537 0b68      	SBC  R22,R24
000538 f051      	BREQ __ZERORES
000539 f410      	BRCC __ADDF1210
00053a 9400      	COM  R0
00053b dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
00053c 2366      	TST  R22
00053d f392      	BRMI __ADDF129
00053e 0fee      	LSL  R30
00053f 1fff      	ROL  R31
000540 1f66      	ROL  R22
000541 957a      	DEC  R23
000542 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000543 27ee      	CLR  R30
000544 27ff      	CLR  R31
000545 01bf      	MOVW R22,R30
000546 915f      	POP  R21
000547 9508      	RET
                 
                 __MINRES:
000548 efef      	SER  R30
000549 efff      	SER  R31
00054a e76f      	LDI  R22,0x7F
00054b ef7f      	SER  R23
00054c 915f      	POP  R21
00054d 9508      	RET
                 
                 __MAXRES:
00054e efef      	SER  R30
00054f efff      	SER  R31
000550 e76f      	LDI  R22,0x7F
000551 e77f      	LDI  R23,0x7F
000552 915f      	POP  R21
000553 9508      	RET
                 
                 __MULF12:
000554 935f      	PUSH R21
000555 df32      	RCALL __UNPACK
000556 3870      	CPI  R23,0x80
000557 f359      	BREQ __ZERORES
000558 3890      	CPI  R25,0x80
000559 f349      	BREQ __ZERORES
00055a 2401      	EOR  R0,R1
00055b 9408      	SEC
00055c 1f79      	ADC  R23,R25
00055d f423      	BRVC __MULF124
00055e f324      	BRLT __ZERORES
                 __MULF125:
00055f 2000      	TST  R0
000560 f33a      	BRMI __MINRES
000561 cfec      	RJMP __MAXRES
                 __MULF124:
000562 920f      	PUSH R0
000563 931f      	PUSH R17
000564 932f      	PUSH R18
000565 933f      	PUSH R19
000566 934f      	PUSH R20
000567 2711      	CLR  R17
000568 2722      	CLR  R18
000569 2799      	CLR  R25
00056a 9f68      	MUL  R22,R24
00056b 01a0      	MOVW R20,R0
00056c 9f8f      	MUL  R24,R31
00056d 2d30      	MOV  R19,R0
00056e 0d41      	ADD  R20,R1
00056f 1f59      	ADC  R21,R25
000570 9f6b      	MUL  R22,R27
000571 0d30      	ADD  R19,R0
000572 1d41      	ADC  R20,R1
000573 1f59      	ADC  R21,R25
000574 9f8e      	MUL  R24,R30
000575 d027      	RCALL __MULF126
000576 9fbf      	MUL  R27,R31
000577 d025      	RCALL __MULF126
000578 9f6a      	MUL  R22,R26
000579 d023      	RCALL __MULF126
00057a 9fbe      	MUL  R27,R30
00057b d01d      	RCALL __MULF127
00057c 9faf      	MUL  R26,R31
00057d d01b      	RCALL __MULF127
00057e 9fae      	MUL  R26,R30
00057f 0d11      	ADD  R17,R1
000580 1f29      	ADC  R18,R25
000581 1f39      	ADC  R19,R25
000582 1f49      	ADC  R20,R25
000583 1f59      	ADC  R21,R25
000584 2fe3      	MOV  R30,R19
000585 2ff4      	MOV  R31,R20
000586 2f65      	MOV  R22,R21
000587 2f52      	MOV  R21,R18
000588 914f      	POP  R20
000589 913f      	POP  R19
00058a 912f      	POP  R18
00058b 911f      	POP  R17
00058c 900f      	POP  R0
00058d 2366      	TST  R22
00058e f02a      	BRMI __MULF122
00058f 0f55      	LSL  R21
000590 1fee      	ROL  R30
000591 1fff      	ROL  R31
000592 1f66      	ROL  R22
000593 c002      	RJMP __MULF123
                 __MULF122:
000594 9573      	INC  R23
000595 f24b      	BRVS __MULF125
                 __MULF123:
000596 ded5      	RCALL __ROUND_REPACK
000597 915f      	POP  R21
000598 9508      	RET
                 
                 __MULF127:
000599 0d10      	ADD  R17,R0
00059a 1d21      	ADC  R18,R1
00059b 1f39      	ADC  R19,R25
00059c c002      	RJMP __MULF128
                 __MULF126:
00059d 0d20      	ADD  R18,R0
00059e 1d31      	ADC  R19,R1
                 __MULF128:
00059f 1f49      	ADC  R20,R25
0005a0 1f59      	ADC  R21,R25
0005a1 9508      	RET
                 
                 __DIVF21:
0005a2 935f      	PUSH R21
0005a3 dee4      	RCALL __UNPACK
0005a4 3870      	CPI  R23,0x80
0005a5 f421      	BRNE __DIVF210
0005a6 2011      	TST  R1
                 __DIVF211:
0005a7 f40a      	BRPL __DIVF219
0005a8 cf9f      	RJMP __MINRES
                 __DIVF219:
0005a9 cfa4      	RJMP __MAXRES
                 __DIVF210:
0005aa 3890      	CPI  R25,0x80
0005ab f409      	BRNE __DIVF218
                 __DIVF217:
0005ac cf96      	RJMP __ZERORES
                 __DIVF218:
0005ad 2401      	EOR  R0,R1
0005ae 9408      	SEC
0005af 0b97      	SBC  R25,R23
0005b0 f41b      	BRVC __DIVF216
0005b1 f3d4      	BRLT __DIVF217
0005b2 2000      	TST  R0
0005b3 cff3      	RJMP __DIVF211
                 __DIVF216:
0005b4 2f79      	MOV  R23,R25
0005b5 931f      	PUSH R17
0005b6 932f      	PUSH R18
0005b7 933f      	PUSH R19
0005b8 934f      	PUSH R20
0005b9 2411      	CLR  R1
0005ba 2711      	CLR  R17
0005bb 2722      	CLR  R18
0005bc 2733      	CLR  R19
0005bd 01a9      	MOVW R20,R18
0005be e290      	LDI  R25,32
                 __DIVF212:
0005bf 17ae      	CP   R26,R30
0005c0 07bf      	CPC  R27,R31
0005c1 0786      	CPC  R24,R22
0005c2 0741      	CPC  R20,R17
0005c3 f030      	BRLO __DIVF213
0005c4 1bae      	SUB  R26,R30
0005c5 0bbf      	SBC  R27,R31
0005c6 0b86      	SBC  R24,R22
0005c7 0b41      	SBC  R20,R17
0005c8 9408      	SEC
0005c9 c001      	RJMP __DIVF214
                 __DIVF213:
0005ca 9488      	CLC
                 __DIVF214:
0005cb 1f55      	ROL  R21
0005cc 1f22      	ROL  R18
0005cd 1f33      	ROL  R19
0005ce 1c11      	ROL  R1
0005cf 1faa      	ROL  R26
0005d0 1fbb      	ROL  R27
0005d1 1f88      	ROL  R24
0005d2 1f44      	ROL  R20
0005d3 959a      	DEC  R25
0005d4 f751      	BRNE __DIVF212
0005d5 01f9      	MOVW R30,R18
0005d6 2d61      	MOV  R22,R1
0005d7 914f      	POP  R20
0005d8 913f      	POP  R19
0005d9 912f      	POP  R18
0005da 911f      	POP  R17
0005db 2366      	TST  R22
0005dc f032      	BRMI __DIVF215
0005dd 0f55      	LSL  R21
0005de 1fee      	ROL  R30
0005df 1fff      	ROL  R31
0005e0 1f66      	ROL  R22
0005e1 957a      	DEC  R23
0005e2 f24b      	BRVS __DIVF217
                 __DIVF215:
0005e3 de88      	RCALL __ROUND_REPACK
0005e4 915f      	POP  R21
0005e5 9508      	RET
                 
                 _delay_ms:
0005e6 9610      	adiw r26,0
0005e7 f039      	breq __delay_ms1
                 __delay_ms0:
0005e8 95a8      	wdr
                +
0005e9 e888     +LDI R24 , LOW ( 0x1388 )
0005ea e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
0005eb 9701     +SBIW R24 , 1
0005ec f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
0005ed 9711      	sbiw r26,1
0005ee f7c9      	brne __delay_ms0
                 __delay_ms1:
0005ef 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  37 r1 :  21 r2 :   0 r3 :   4 r4 :   4 r5 :   0 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   5 
r16:  37 r17:  55 r18:  51 r19:  21 r20:  34 r21:  81 r22:  61 r23:  48 
r24:  46 r25:  34 r26: 115 r27:  51 r28:  14 r29:   1 r30: 261 r31: 107 
x  :  27 y  : 146 z  :  17 
Registers used: 25 out of 35 (71.4%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  19 add   :  11 
adiw  :  24 and   :   2 andi  :   5 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  28 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   3 brmi  :   8 brne  :  39 brpl  :   7 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  :   0 
cbi   :  11 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  24 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :   5 cpc   :   6 cpi   :  49 cpse  :   0 dec   :  12 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   0 inc   :   4 jmp   :  33 ld    :  25 ldd   :  61 ldi   : 161 
lds   :  20 lpm   :  14 lsl   :  11 lsr   :   2 mov   :  57 movw  :  34 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   9 out   :  22 pop   :  19 push  :  18 rcall : 119 ret   :  47 
reti  :   0 rjmp  :  98 rol   :  24 ror   :  12 sbc   :   8 sbci  :  10 
sbi   :  15 sbic  :   0 sbis  :   2 sbiw  :  21 sbr   :   0 sbrc  :   2 
sbrs  :  15 sec   :   3 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  62 std   :  30 sts   :  48 sub   :   5 subi  :  20 swap  :   1 
tst   :  18 wdr   :   1 
Instructions used: 72 out of 116 (62.1%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000be0   2960     80   3040   16384  18.6%
[.dseg] 0x000100 0x000255      0     85     85    1024   8.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
